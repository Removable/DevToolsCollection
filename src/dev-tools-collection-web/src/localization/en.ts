export default {
	common: {
		toolbox: 'Online Toolbox',
		description:
			'Provides various practical tools to improve your work efficiency',
		searchResults: 'Search Results',
		allTools: 'All Tools',
		tool: 'Tool',
		copyright: 'Â© {{year}} Toolbox. All rights reserved.',
		searchPlaceholder:
			'Search tools, e.g.: JSON Formatter, Timestamp Converter...'
	},
	tools: {
		'json-formatter': 'JSON Formatter',
		timestamp: 'Timestamp Converter',
		'uuid-generator': 'UUID/GUID Generator',
		'base64-codec': 'Base64 Encoder/Decoder',
		'url-codec': 'URL Encoder/Decoder',
		'qrcode-generator': 'QR Code Generator',
		'hash-encoder': 'Hash Encoder',
		'html-preview': 'HTML Preview',
		'regex-tester': 'Regular Expression Tester',
		'ip-info': 'IP Information'
	},
	jsonFormatter: {
		indentSize: 'Indent Size:',
		spaces2: '2 Spaces',
		spaces4: '4 Spaces',
		validateFormat: 'Validate & Format',
		compress: 'Compress',
		escape: 'Escape',
		unescape: 'Unescape',
		copy: 'Copy',
		errorLine: 'Error at line',
		placeholder: 'Paste JSON data here...',
		invalidJson: 'Invalid JSON format',
		validJson: 'Valid JSON format',
		enterValidJson: 'Please enter valid JSON data first',
		jsonEscaped: 'JSON has been escaped',
		jsonUnescaped: 'Escape characters removed',
		processingError: 'Error processing JSON',
		copiedToClipboard: 'Copied to clipboard',
		copyFailed: 'Failed to copy to clipboard'
	},
	timestampConverter: {
		currentTimestamp: 'Current Timestamp',
		continue: 'Continue',
		pause: 'Pause',
		dateToTimestamp: 'Date to Timestamp',
		inputDateTime: 'Input Date Time',
		convert: 'Convert',
		conversionResult: 'Conversion Result',
		timestampToDate: 'Timestamp to Date',
		inputTimestamp: 'Input Timestamp',
		timestampExample: 'Example: 1747977617089',
		dateFormat: 'Date Format',
		selectDateFormat: 'Select date format',
		defaultFormat: 'Default Format',
		isoFormat: 'ISO Format',
		localeFormat: 'Locale Format',
		utcFormat: 'UTC Format',
		copy: 'Copy',
		timestampCopied: 'Timestamp copied',
		dateCopied: 'Date copied',
		invalidDate: 'Please enter a valid date',
		invalidTimestamp: 'Please enter a valid timestamp',
		dateConversionSuccess: 'Date conversion successful',
		timestampConversionSuccess: 'Timestamp conversion successful'
	},
	uuidGenerator: {
		count: 'Count',
		useHyphens: 'Use Hyphens | -',
		uppercase: 'Uppercase',
		commaSeparated: 'Comma Separated | ,',
		useQuotes: 'Use Quotes | ""',
		generate: 'Generate UUID',
		copy: 'Copy',
		generated: '{{count}} UUIDs generated',
		noUuid: 'No UUID to copy',
		copiedToClipboard: 'Copied to clipboard',
		copyFailed: 'Failed to copy to clipboard',
		placeholder: 'Click "Generate UUID" button to generate UUIDs...'
	},
	base64Codec: {
		textEncode: 'Text Encode',
		fileEncode: 'File Encode',
		decode: 'Base64 Decode',
		urlSafeMode: "URL Safe Mode (use '-' and '_' instead of '+' and '/')",
		dataUriFormat:
			'Data URI Format (output data:[mediatype];base64,{data} format)',
		inputText: 'Input Text',
		inputBase64: 'Input Base64',
		uploadFile: 'Upload File for Encoding',
		selectFile: 'Select File',
		fileSupport: 'Supports all file types, max file size: 5MB',
		encode: 'Encode',
		encodeFile: 'Encode File',
		swap: 'Swap',
		copyResult: 'Copy Result',
		base64Result: 'Base64 Result',
		fileBase64Result: 'File Base64 Result',
		decodeResult: 'Decode Result',
		inputTextPlaceholder: 'Enter text to encode...',
		inputBase64Placeholder: 'Enter Base64 text to decode...',
		base64ResultPlaceholder: 'Base64 encoded result...',
		fileResultPlaceholder: 'File encoding result...',
		decodeResultPlaceholder: 'Decoded text...',
		encodeSuccess: 'Encoding successful',
		decodeSuccess: 'Decoding successful',
		fileEncodeSuccess: 'File encoding successful',
		noInputText: 'Please enter text to encode first',
		noInputBase64: 'Please enter Base64 text to decode first',
		noFile: 'Please select a file first',
		fileSizeExceeded: 'File size cannot exceed 5MB',
		fileReadError: 'Failed to read file',
		encodeError: 'Encoding failed: {{error}}',
		decodeError: 'Decoding failed: {{error}}',
		invalidBase64: 'Invalid Base64 string',
		unknownError: 'Unknown error',
		noCopyContent: 'No content to copy',
		copiedToClipboard: 'Copied to clipboard',
		copyFailed: 'Failed to copy to clipboard',
		fileSelected: 'File selected: {{name}}'
	},
	urlCodec: {
		encode: 'URL Encode',
		decode: 'URL Decode',
		encodeSpaces: 'Encode spaces as %20 (otherwise as +)',
		encodeAll: 'Encode all characters (including unreserved characters)',
		inputText: 'Input Text',
		inputUrlText: 'Input URL Encoded Text',
		inputTextPlaceholder: 'Enter text to encode...',
		inputUrlPlaceholder: 'Enter URL encoded text to decode...',
		urlEncodeResult: 'URL Encode Result',
		urlDecodeResult: 'URL Decode Result',
		urlEncodePlaceholder: 'URL encoded result...',
		urlDecodePlaceholder: 'Decoded text...',
		encodeSuccess: 'Encoding successful',
		decodeSuccess: 'Decoding successful',
		noInputText: 'Please enter text to encode first',
		noInputUrl: 'Please enter URL encoded text to decode first',
		encodeError: 'Encoding failed: {{error}}',
		decodeError: 'Decoding failed: {{error}}',
		invalidUrlEncoding: 'Invalid URL encoded string',
		unknownError: 'Unknown error',
		noCopyContent: 'No content to copy',
		copiedToClipboard: 'Copied to clipboard',
		copyFailed: 'Failed to copy to clipboard',
		swap: 'Swap'
	},
	qrcodeGenerator: {
		content: 'QR Code Content',
		contentPlaceholder:
			'Enter text, URL or other content to generate QR code...',
		errorCorrectionLevel: 'Error Correction Level',
		selectErrorLevel: 'Select error correction level',
		errorLevelL: 'Low (L - 7%)',
		errorLevelM: 'Medium (M - 15%)',
		errorLevelQ: 'High (Q - 25%)',
		errorLevelH: 'Highest (H - 30%)',
		size: 'Size: {{size}}x{{size}} pixels',
		qrColor: 'QR Code Color',
		backgroundColor: 'Background Color',
		generate: 'Generate QR Code',
		download: 'Download',
		generateSuccess: 'QR code generated',
		generateError: 'Error generating QR code',
		noQrToDownload: 'No QR code to download',
		downloadSuccess: 'QR code downloaded',
		enterContent: 'Enter content to generate QR code'
	},
	hashEncoder: {
		textHash: 'Text Hash',
		fileHash: 'File Hash',
		selectAlgorithm: 'Select Hash Algorithm',
		hmacKey: 'HMAC Key',
		hmacKeyPlaceholder: 'Enter HMAC key...',
		inputText: 'Input Text',
		inputTextPlaceholder: 'Enter text to hash...',
		uploadFile: 'Upload File for Hashing',
		selectFile: 'Select File',
		fileSupport: 'Supports all file types, max file size: 10MB',
		calculate: 'Calculate Hash',
		calculateFileHash: 'Calculate File Hash',
		copyResult: 'Copy Result',
		hashResult: 'Hash Result',
		hashResultPlaceholder: 'Hash calculation result...',
		noInputText: 'Please enter text to hash first',
		hmacKeyRequired: 'HMAC key is required when using HMAC algorithms',
		hashSuccess: 'Hash calculation successful',
		fileHashSuccess: 'File hash calculation successful',
		hashError: 'Hash calculation failed: {{error}}',
		noFile: 'Please select a file first',
		fileSizeExceeded: 'File size cannot exceed 10MB',
		noCopyContent: 'No content to copy',
		copiedToClipboard: 'Copied to clipboard',
		copyFailed: 'Failed to copy to clipboard',
		fileSelected: 'File selected: {{name}}'
	},
	htmlPreview: {
		title: 'HTML Online Preview Tool',
		formatCode: 'Format Code',
		copyCode: 'Copy Code',
		refreshPreview: 'Refresh Preview',
		codePlaceholder: 'Enter HTML code here...',
		noHtmlCode: 'Please enter HTML code first',
		formatSuccess: 'Code formatting successful',
		formatError: 'Formatting failed: {{error}}',
		copiedToClipboard: 'Copied to clipboard',
		copyFailed: 'Failed to copy to clipboard',
		previewRefreshed: 'Preview refreshed',
		sampleTitle: 'HTML Preview Example',
		sampleDescription:
			'This is a simple HTML preview example. You can modify the code in the editor on the left, and the preview will be displayed on the right in real-time.',
		sampleSupport:
			'Supports <span class="highlight">HTML</span> and <span class="highlight">CSS</span> code.'
	},
	regexTester: {
		title: 'Regular Expression Tester',
		regexPattern: 'Regular Expression',
		flags: 'Flags',
		testText: 'Test Text',
		commonPatterns: 'Common Regular Expressions',
		syntaxReference: 'Syntax Reference',
		characterClasses: 'Character Classes',
		quantifiers: 'Quantifiers',
		anchors: 'Anchors',
		groups: 'Groups and References',
		specialChars: 'Special Characters',
		flagsReference: 'Flags',
		patternPlaceholder: 'Enter regular expression, e.g.: \\b\\w+\\b',
		flagsPlaceholder: 'Flags',
		testTextPlaceholder: 'Enter text to test here...',
		matchesFound: 'Found {{count}} matches',
		regexError: 'Regular expression error: {{message}}',
		// Common patterns
		emailPattern: 'Email Address',
		phonePattern: 'China Mobile Number',
		urlPattern: 'URL',
		idCardPattern: 'China ID Card',
		ipv4Pattern: 'IPv4 Address',
		ipv6Pattern: 'IPv6 Address',
		datePattern: 'Date',
		chinesePattern: 'Chinese Characters',
		// Syntax reference descriptions
		dotDesc: 'Matches any single character except newline',
		digitDesc: 'Matches any digit character (0-9)',
		nonDigitDesc: 'Matches any non-digit character',
		wordDesc: 'Matches any alphanumeric character (a-z, A-Z, 0-9, _)',
		nonWordDesc: 'Matches any non-alphanumeric character',
		whitespaceDesc:
			'Matches any whitespace character (space, tab, newline, etc.)',
		nonWhitespaceDesc: 'Matches any non-whitespace character',
		starDesc: 'Matches the previous expression 0 or more times',
		plusDesc: 'Matches the previous expression 1 or more times',
		questionDesc: 'Matches the previous expression 0 or 1 time',
		exactDesc: 'Matches the previous expression exactly n times',
		minDesc: 'Matches the previous expression at least n times',
		rangeDesc:
			'Matches the previous expression at least n times, at most m times',
		startDesc: 'Matches the start of the string',
		endDesc: 'Matches the end of the string',
		wordBoundaryDesc: 'Matches a word boundary',
		nonWordBoundaryDesc: 'Matches a non-word boundary',
		globalDesc: 'Global match (find all matches)',
		ignoreCaseDesc: 'Ignore case',
		multilineDesc: 'Multiline match',
		dotAllDesc: 'Allows . to match newline',
		unicodeDesc: 'Unicode mode',
		stickyDesc: 'Sticky match',
		captureGroupDesc:
			'Capturing group, matches the expression inside parentheses',
		nonCaptureGroupDesc: 'Non-capturing group',
		backreferenceDesc: 'Backreference, references a previous capturing group',
		orDesc: 'OR operator, matches the expression before or after the |',
		charSetDesc: 'Character set, matches any one character inside brackets',
		negatedCharSetDesc:
			'Negated character set, matches any one character not inside brackets',
		charRangeDesc:
			'Character range, matches any one character in the specified range',
		escapeDesc: 'Escape character, used to match special characters themselves'
	},
	ipInfo: {
		title: 'IP Information Tool',
		description:
			'View detailed information about an IP address, including ASN, geolocation, company information, etc.',
		inputIp: 'Enter IP Address',
		ipPlaceholder: 'Example: 8.8.8.8',
		search: 'Search',
		searching: 'Searching...',
		searchMyIp: 'Search My IP',
		// Information sections
		basicInfo: 'Basic Information',
		locationInfo: 'Location Information',
		privacyNetworkInfo: 'Privacy and Network Information',
		// Basic information fields
		ipAddress: 'IP Address',
		asn: 'ASN',
		ipRange: 'IP Range',
		company: 'Company',
		asnType: 'ASN Type',
		abuseContact: 'Abuse Contact',
		// Location information fields
		city: 'City',
		state: 'State/Province',
		country: 'Country',
		coordinates: 'Coordinates',
		localTime: 'Local Time',
		timezone: 'Timezone',
		// Privacy information fields
		privateIp: 'Private IP',
		anycast: 'Anycast',
		privateIpDesc: 'Whether this IP is using VPN or other methods to hide',
		anycastDesc: 'Anycast address is an address shared by multiple systems',
		yes: 'Yes',
		no: 'No'
	}
};
